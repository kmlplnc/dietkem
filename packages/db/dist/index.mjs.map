{"version":3,"sources":["../src/index.ts","../src/schema.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js';\r\nimport postgres from 'postgres';\r\nimport * as schema from './schema';\r\n\r\nconst connectionString = process.env.DATABASE_URL || 'postgres://postgres:postgres@localhost:5432/dietkem';\r\n\r\n// for query purposes\r\nexport const queryClient = postgres(connectionString);\r\nexport const db = drizzle(queryClient, { schema });\r\n\r\nexport * from './schema'; ","import { pgTable, serial, varchar, timestamp, integer, decimal, text, pgEnum } from 'drizzle-orm/pg-core';\r\n\r\n// Enums\r\nexport const userRoleEnum = pgEnum('user_role', ['dietitian', 'client']);\r\nexport const mealTypeEnum = pgEnum('meal_type', ['breakfast', 'lunch', 'dinner', 'snack']);\r\n\r\n// Users table\r\nexport const users = pgTable('users', {\r\n  id: serial('id').primaryKey(),\r\n  clerk_id: varchar('clerk_id', { length: 255 }).notNull().unique(),\r\n  email: varchar('email', { length: 255 }).notNull().unique(),\r\n  role: userRoleEnum('role').notNull(),\r\n  created_at: timestamp('created_at').defaultNow().notNull(),\r\n  updated_at: timestamp('updated_at').defaultNow().notNull(),\r\n});\r\n\r\n// Clients table\r\nexport const clients = pgTable('clients', {\r\n  id: serial('id').primaryKey(),\r\n  user_id: integer('user_id').references(() => users.id).notNull(),\r\n  name: varchar('name', { length: 255 }).notNull(),\r\n  gender: varchar('gender', { length: 50 }),\r\n  birth_date: timestamp('birth_date'),\r\n  height_cm: decimal('height_cm', { precision: 5, scale: 2 }),\r\n  weight_kg: decimal('weight_kg', { precision: 5, scale: 2 }),\r\n  goal: text('goal'),\r\n  notes: text('notes'),\r\n  created_at: timestamp('created_at').defaultNow().notNull(),\r\n});\r\n\r\n// Measurements table\r\nexport const measurements = pgTable('measurements', {\r\n  id: serial('id').primaryKey(),\r\n  client_id: integer('client_id').references(() => clients.id).notNull(),\r\n  date: timestamp('date').notNull(),\r\n  weight_kg: decimal('weight_kg', { precision: 5, scale: 2 }).notNull(),\r\n  waist_cm: decimal('waist_cm', { precision: 5, scale: 2 }),\r\n  body_fat_percent: decimal('body_fat_percent', { precision: 4, scale: 2 }),\r\n});\r\n\r\n// Meal plans table\r\nexport const meal_plans = pgTable('meal_plans', {\r\n  id: serial('id').primaryKey(),\r\n  client_id: integer('client_id').references(() => clients.id).notNull(),\r\n  start_date: timestamp('start_date').notNull(),\r\n  end_date: timestamp('end_date').notNull(),\r\n  total_calories: integer('total_calories').notNull(),\r\n  notes: text('notes'),\r\n  created_by: integer('created_by').references(() => users.id).notNull(),\r\n});\r\n\r\n// Meal plan days table\r\nexport const meal_plan_days = pgTable('meal_plan_days', {\r\n  id: serial('id').primaryKey(),\r\n  meal_plan_id: integer('meal_plan_id').references(() => meal_plans.id).notNull(),\r\n  date: timestamp('date').notNull(),\r\n  notes: text('notes'),\r\n});\r\n\r\n// Meals table\r\nexport const meals = pgTable('meals', {\r\n  id: serial('id').primaryKey(),\r\n  meal_plan_day_id: integer('meal_plan_day_id').references(() => meal_plan_days.id).notNull(),\r\n  meal_type: mealTypeEnum('meal_type').notNull(),\r\n  name: varchar('name', { length: 255 }).notNull(),\r\n  calories: integer('calories').notNull(),\r\n  protein_g: decimal('protein_g', { precision: 5, scale: 2 }).notNull(),\r\n  carbs_g: decimal('carbs_g', { precision: 5, scale: 2 }).notNull(),\r\n  fat_g: decimal('fat_g', { precision: 5, scale: 2 }).notNull(),\r\n  description: text('description'),\r\n});\r\n\r\n// Foods table\r\nexport const foods = pgTable('foods', {\r\n  id: serial('id').primaryKey(),\r\n  name: varchar('name', { length: 255 }).notNull(),\r\n  description: text('description'),\r\n  calories_per_100g: integer('calories_per_100g').notNull(),\r\n  protein_per_100g: decimal('protein_per_100g', { precision: 5, scale: 2 }).notNull(),\r\n  carbs_per_100g: decimal('carbs_per_100g', { precision: 5, scale: 2 }).notNull(),\r\n  fat_per_100g: decimal('fat_per_100g', { precision: 5, scale: 2 }).notNull(),\r\n  locale: varchar('locale', { length: 10 }).notNull().default('en'),\r\n});\r\n\r\n// Water logs table\r\nexport const water_logs = pgTable('water_logs', {\r\n  id: serial('id').primaryKey(),\r\n  client_id: integer('client_id').references(() => clients.id).notNull(),\r\n  date: timestamp('date').notNull(),\r\n  value_liters: decimal('value_liters', { precision: 4, scale: 2 }).notNull(),\r\n});\r\n\r\n// Weight logs table\r\nexport const weight_logs = pgTable('weight_logs', {\r\n  id: serial('id').primaryKey(),\r\n  client_id: integer('client_id').references(() => clients.id).notNull(),\r\n  date: timestamp('date').notNull(),\r\n  weight_kg: decimal('weight_kg', { precision: 5, scale: 2 }).notNull(),\r\n}); "],"mappings":"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","names":[]}