version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: dietkem_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dietkem}
      POSTGRES_USER: ${POSTGRES_USER:-dietkem_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dietkem_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/db/drizzle:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - dietkem_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dietkem_user} -d ${POSTGRES_DB:-dietkem}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: dietkem_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-dietkem_user}:${POSTGRES_PASSWORD:-dietkem_password}@postgres:5432/${POSTGRES_DB:-dietkem}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3001}
      RESEND_API_KEY: ${RESEND_API_KEY}
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dietkem_network
    volumes:
      - ./packages/db/drizzle:/app/packages/db/drizzle
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        echo 'Running database migrations...' &&
        cd packages/db && npm run db:migrate &&
        echo 'Starting API server...' &&
        cd /app/apps/api && npm start
      "

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: dietkem_web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - dietkem_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dietkem_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
    networks:
      - dietkem_network

volumes:
  postgres_data:
    driver: local

networks:
  dietkem_network:
    driver: bridge 